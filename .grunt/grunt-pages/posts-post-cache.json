{"posts":[{"title":"Grunt Up & Running","slug":"front","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/00 - Front Matter.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p>A book by Dan Burzo (<a href=\"http://twitter.com/danburzo\">@danburzo</a>)</p>\n<h2><a name=\"about-this-book\" class=\"anchor\" href=\"#about-this-book\"><span class=\"header-link\"></span></a>About this book</h2><p>This is a book about using Grunt to automate your web development workflow. It covers Grunt v0.4.x.</p>\n<p>It&#39;s based on the <a href=\"http://gruntjs.com/getting-started\">Grunt Documentation</a> and <a href=\"http://gruntjs.com/api/grunt\">API Reference</a> and takes cues from Bel√©n Albeza&#39;s excellent primer <a href=\"https://leanpub.com/grunt\"><em>Power-up Your Front-End Development with Grunt</em></a>, which I encourage you to take a look at.</p>\n<p>You can find the book on GitHub: <a href=\"https://github.com/danburzo/grunt-recipes\">https://github.com/danburzo/grunt-recipes</a>. Contributions &amp; corrections are always welcome.</p>\n","url":"front/","dest":"book/chapters/front/index.html"},{"title":"Getting Started","slug":"getting-started","date":"2014-04-06T16:23:02.000Z","sourcePath":"chapters/01 - Getting Started.md","lastModified":"2014-04-06T16:23:02.000Z","content":"<h3><a name=\"meet-grunt\" class=\"anchor\" href=\"#meet-grunt\"><span class=\"header-link\"></span></a>Meet Grunt</h3><p>Grunt was created by Ben Alman a.k.a. <a href=\"http://twitter.com/cowboy\">@cowboy</a> to automate his front-end development workflow. You know, all the little repetitive tasks like unit testing, minifying your JavaScript and CSS, compiling your Sass stylesheets or CoffeeScripts, linting and what-not. With Grunt, they become a breeze: configure them once and let Grunt run them for you; in this sense, Grunt is a <em>task runner</em> for the boring but oh-so-necessary parts of the web developer&#39;s life. It&#39;s <a href=\"https://github.com/gruntjs/\">open source</a> and at the heart of a wonderful ecosystem of thousands of plugins. As such, any tool you&#39;ve ever used in your workflow is likely to have a Grunt counterpart. And if it doesn&#39;t, it&#39;s easy to roll out your own plugin and share it with the community. Organizations like Twitter, Adobe, jQuery (and <a href=\"http://gruntjs.com/who-uses-grunt\">many others</a>) use it and so should you, because it&#39;s A Great Thing&trade;.</p>\n<h3><a name=\"front-end-workflow\" class=\"anchor\" href=\"#front-end-workflow\"><span class=\"header-link\"></span></a>Front-end workflow?</h3><p>Here are some things we talk about when we talk about front-end workflow:</p>\n<h4><a name=\"optimizing-for-speed-concatenation-amp-minification\" class=\"anchor\" href=\"#optimizing-for-speed-concatenation-amp-minification\"><span class=\"header-link\"></span></a>Optimizing for speed: concatenation &amp; minification</h4><p>One of the tenets of optimizing web applications is to do everything in our power to reduce (1) the amount of HTTP requests and (2) the payload for each HTTP request. In real life, this means bundling your scripts, stylesheets &mdash; and even images! &mdash; into as few files as possible, using whatever tools one can cobble together.</p>\n<p>We&#39;ll use Grunt to make our web application production-ready.</p>\n<h4><a name=\"keeping-things-modular\" class=\"anchor\" href=\"#keeping-things-modular\"><span class=\"header-link\"></span></a>Keeping things modular</h4><p>HTML lacks a way to compose your pages from modules. To have a website with many pages that share a common header and footer, which is to say any website ever, you&#39;re stuck with:</p>\n<ul>\n<li>repeating the same markup in each page of your site, making sure to update all your pages when you want to make even the smallest change (impractical);</li>\n<li>using frames to load many HTML files on a single page &mdash; one for the header, one for the footer, one for the main content (usability nightmare); </li>\n<li>using PHP or a similar language to include bits of HTML dynamically (needs a web server with PHP support);</li>\n<li>loading the modules through AJAX calls (needs JavaScript to work, unfriendly to search engines);</li>\n</ul>\n<p>We&#39;ll learn how to use Grunt to write and compose HTML modules in a straightforward way.</p>\n<h4><a name=\"making-css-amp-javascript-fun-again\" class=\"anchor\" href=\"#making-css-amp-javascript-fun-again\"><span class=\"header-link\"></span></a>Making CSS &amp; JavaScript fun again</h4><p>CSS and JavaScript are wonderful things with less-than-wonderful parts. CSS is crippled by repetition since it lacks variables and inheritance. JavaScript uses prototype inheritance, which seems un unnerve people used to classical inheritance.</p>\n<p>Sass, LESS and a host of other languages superset CSS with features like variables, mixins, nesting and functions. They make the code more concise, readable and maintainable. Through dedicated tools, these get compiled into normal CSS and used in web pages.</p>\n<p>Similarly, CoffeeScript and TypeScript aim to soothe the pains of JavaScript developers by providing traditional classes and inheritance along other features and syntactic perks.</p>\n<p>We&#39;ll see how Grunt can pre-process these files automatically, so you don&#39;t even have to think about it.</p>\n<h4><a name=\"keeping-bugs-at-bay\" class=\"anchor\" href=\"#keeping-bugs-at-bay\"><span class=\"header-link\"></span></a>Keeping bugs at bay</h4><p>Lint is the fluff that accumulates on your clothes or in your bellybutton. It&#39;s also the name of a class of tools that look at your code and flag potentially flawed constructs. They&#39;re formally known as <em>static code analysis tools</em>.</p>\n<p>We have lint checkers for JavaScript that remind you that <code>==</code> is not the same thing as <code>===</code> or that declaring functions inside a for-loop is generally a bad idea. They also point out style inconsistencies such as using tabs <em>and</em> spaces for indentation, which usually drive people working in a team insane.</p>\n<p>And then there&#39;s unit testing, that thing you should be doing &mdash; in fact, I&#39;m going to assume you are &mdash; that keeps us safe from breaking things when we refactor code.</p>\n<p>We&#39;ll find that Grunt is the perfect tool to automate code checking &amp; testing.</p>\n<h4><a name=\"better-documentation\" class=\"anchor\" href=\"#better-documentation\"><span class=\"header-link\"></span></a>Better documentation</h4><p>They say every person has a book in them. Grunt can help your meticulously crafted comments shine by making them into clean, readable documentation.</p>\n<h3><a name=\"resources\" class=\"anchor\" href=\"#resources\"><span class=\"header-link\"></span></a>Resources</h3><p>Here are a few places we&#39;re going to visit quite often, so make sure you have them handy:</p>\n<ul>\n<li><a href=\"http://gruntjs.com\">http://gruntjs.com</a>, Grunt&#39;s official page, with guides and the API reference;</li>\n<li><a href=\"http://gruntjs.com/plugins\">http://gruntjs.com/plugins</a>, the list of all available Grunt plugins. The ones that start with <code>grunt-contrib-</code> are maintained by the Grunt team, while the others are created by people like you and me. You can find a list of good plugins in this book&#39;s <em>Appendix</em>;</li>\n<li><a href=\"https://twitter.com/gruntjs\">@gruntjs</a> for updates on the topic;</li>\n<li>the IRC channel <code>#grunt</code> on <code>irc.freenode.net</code> is where the team members hang out.</li>\n</ul>\n<h3><a name=\"get-grunt-up-amp-running\" class=\"anchor\" href=\"#get-grunt-up-amp-running\"><span class=\"header-link\"></span></a>Get Grunt Up &amp; Running</h3><p>Grunt is written in JavaScript, so you&#39;ll need a Node.js environment and the Node Package Manager that comes with it. </p>\n<h4><a name=\"install-node\" class=\"anchor\" href=\"#install-node\"><span class=\"header-link\"></span></a>Install Node</h4><p>Go to <a href=\"http://nodejs.org/download/\">http://nodejs.org/download/</a> and grab the installer for your operating system. It will install Node and NPM.</p>\n<p><em>Note:</em> Working with Grunt means interacting with a shell, which Mac and Linux users are lucky enough to have readily available. As for Windows, let&#39;s just say I&#39;d eat a live snail before I use the Command Prompt. Instead, I suggest you install Git for Windows &mdash; available at <a href=\"http://git-scm.com/downloads\">http://git-scm.com/downloads</a> &mdash; that comes with a real shell.</p>\n<h4><a name=\"install-grunt\" class=\"anchor\" href=\"#install-grunt\"><span class=\"header-link\"></span></a>Install Grunt</h4><p>We&#39;ll use NPM to install the Grunt CLI (Command-Line Interpreter) from the console:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install -g grunt-cli\n</pre></div>\n\n</code></pre>\n<p>The <code>-g</code> flag stands for <em>global</em>, which makes the <code>grunt</code> command available for any project on your machine. </p>\n<p>You may need administrator rights to install <code>grunt-cli</code> globally. If that&#39;s the case, just run: </p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>sudo npm install -g grunt-cli\n</pre></div>\n\n</code></pre>\n<p>That&#39;s it! You&#39;re ready to add Grunt magic to your projects.</p>\n<h4><a name=\"set-up-your-first-grunt-project\" class=\"anchor\" href=\"#set-up-your-first-grunt-project\"><span class=\"header-link\"></span></a>Set up your first Grunt project</h4><p>Let&#39;s create a new project:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>mkdir my-project\n<span class=\"nb\">cd </span>my-project\n</pre></div>\n\n</code></pre>\n<p>There are two main files you need to create in the root directory of your project:</p>\n<ul>\n<li><code>package.json</code>: this is where you store NPM metadata such as the name and description of the project, and its dependencies;</li>\n<li><code>Gruntfile.js</code>: this is where you load and configure your Grunt tasks.</li>\n</ul>\n<p>Your project&#39;s file structure should look like this:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>my-project/\n    Gruntfile.js\n    package.json\n</pre></div>\n\n</code></pre>\n<h5><a name=\"package-json\" class=\"anchor\" href=\"#package-json\"><span class=\"header-link\"></span></a>package.json</h5><p>Let&#39;s create a basic version of this file:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"p\">{</span>\n  <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;my-project&quot;</span><span class=\"p\">,</span> <span class=\"c1\">// the name of our project, hyphen-separated</span>\n  <span class=\"s2\">&quot;version&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;0.0.0&quot;</span> <span class=\"c1\">// project version (in semantic format)</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>Now, let&#39;s install Grunt in our current project. </p>\n<p>But wait, didn&#39;t we do that already? Well, sort of. We did install Grunt CLI, but that&#39;s just a small utility that runs the local version of <code>grunt</code> for you. We still need to install Grunt in our project (no <code>-g</code> flag this time):</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install grunt --save-dev\n</pre></div>\n\n</code></pre>\n<p>The <code>--save-dev</code> flag tells NPM to update <code>package.json</code> to include <code>grunt</code> as a dependency for the project. Our file will now look like this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"p\">{</span>\n  <span class=\"s2\">&quot;name&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;my-project&quot;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&quot;version&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;0.0.0&quot;</span><span class=\"p\">,</span>\n\n  <span class=\"c1\">// the list of project dependencies</span>\n  <span class=\"s2\">&quot;devDependencies&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">&quot;grunt&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;~0.4.1&quot;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>You&#39;ll also notice a <code>node_modules</code> directory was added to your project. This is where NPM installs all the local modules &mdash; so far it contains just the <code>grunt</code> module. If you&#39;re using Git, you can safely add <code>node_modules</code> to <code>.gitignore</code>.</p>\n<p>Your project&#39;s file structure now looks like this:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>my-project/\n    node_modules/\n    Gruntfile.js\n    package.json\n</pre></div>\n\n</code></pre>\n<p><em>Did you know?</em> Running <code>npm install</code> in any project directory that has a <code>package.json</code> will install all its necessary dependencies with their appropriate versions, as listed in the <code>devDependencies</code> section.</p>\n<h5><a name=\"gruntfile-js\" class=\"anchor\" href=\"#gruntfile-js\"><span class=\"header-link\"></span></a>Gruntfile.js</h5><p>Next, let&#39;s create a Gruntfile next to our <code>package.json</code>. The basic format for the file is this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// We&#39;ll do grunt stuff here soon!</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<p>For example, let&#39;s write a task that just prints out <code>Hello World!</code> into the console:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World!&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<p>And now to run it:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt\n&gt; Running <span class=\"s2\">&quot;default&quot;</span> task\n&gt; Hello World!\n</pre></div>\n\n</code></pre>\n<h4><a name=\"take-five\" class=\"anchor\" href=\"#take-five\"><span class=\"header-link\"></span></a>Take five</h4><p>Alright, let&#39;s recap what we&#39;ve just done:</p>\n<ol>\n<li>We installed Node and NPM, which allow us to run Grunt and install all the necessary plugins;</li>\n<li>We made the <code>grunt</code> command available by installing the Grunt CLI globally;</li>\n<li>We created a new, empty project;</li>\n<li>We added basic versions of <code>package.json</code> and <code>Gruntfile.js</code>;</li>\n<li>We ran <code>grunt</code> for the first time!</li>\n</ol>\n<p>You can read more at: <a href=\"http://gruntjs.com/getting-started\">http://gruntjs.com/getting-started</a></p>\n","url":"getting-started/","dest":"book/chapters/getting-started/index.html"},{"title":"Lint your JavaScript code","slug":"linting","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/02 - Linting your code.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<h2><a name=\"lint-your-javascript-code\" class=\"anchor\" href=\"#lint-your-javascript-code\"><span class=\"header-link\"></span></a>Lint your JavaScript code</h2><p><strong>Plugins used:</strong> <a href=\"https://npmjs.org/package/grunt-contrib-jshint\"><code>grunt-contrib-jshint</code></a>.</p>\n<p>A JavaScript linter is a tool that looks for syntax errors, bad practices and style inconsistencies in your code.</p>\n<h3><a name=\"install-the-jshint-plugin\" class=\"anchor\" href=\"#install-the-jshint-plugin\"><span class=\"header-link\"></span></a>Install the JSHint plugin</h3><pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install grunt-contrib-jshint --save-dev\n</pre></div>\n\n</code></pre>\n<h3><a name=\"load-jshint-tasks-into-our-gruntfile\" class=\"anchor\" href=\"#load-jshint-tasks-into-our-gruntfile\"><span class=\"header-link\"></span></a>Load JSHint tasks into our Gruntfile</h3><pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-jshint&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"configure-the-jshint-task\" class=\"anchor\" href=\"#configure-the-jshint-task\"><span class=\"header-link\"></span></a>Configure the JSHint task</h3><pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n        <span class=\"nx\">jshint</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;scripts/*.js&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-jshint&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<p>We added a call to <code>initConfig</code> for the <code>jshint</code> task. In it, we defined a single <em>target</em> called <code>all</code>. We told JSHint to look at all files with a <code>.js</code> extension within the <code>scripts</code> folder.</p>\n<p><strong>Note:</strong> Grunt tasks can have multiple configurations, named <em>targets</em>. This allows us to use different sets of options for the same task, depending on what we need. A common scenario is having a target for <em>development</em> and one for <em>distribution</em>.</p>\n<h3><a name=\"run-the-jshint-task\" class=\"anchor\" href=\"#run-the-jshint-task\"><span class=\"header-link\"></span></a>Run the JSHint task</h3><p>In your project directory, run:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt jshint:all\n</pre></div>\n\n</code></pre>\n<p>...to run the JSHint task with the <code>all</code> target. Or simply:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt jshint\n</pre></div>\n\n</code></pre>\n<p>This is because <code>grunt-contrib-jshint</code> (along with most other Grunt tasks) is a so-called <em>multitask</em>. </p>\n<p><strong>Note:</strong> Multitasks invoked without an explicit target will run for all targets. </p>\n<p>In the output, you should see a list of all problems the tool found in the specified JavaScript files. This is great, albeit not so readable. Let&#39;s configure JSHint to output to a file rather than in the console:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n        <span class=\"nx\">jshint</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">reporterOutput</span><span class=\"o\">:</span> <span class=\"s1\">&#39;jshint.log&#39;</span>\n            <span class=\"p\">},</span>\n            <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;scripts/*.js&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-jshint&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<p>That&#39;s much better. Now we have the list of errors in a handy file in our project called <code>jshint.log</code>. Brilliant.</p>\n<p>Here we&#39;ve set <code>options</code> globally for <em>all targets</em>, but each individual target can have its own <code>options</code> property. Target-level options will override the task-level options. </p>\n<h3><a name=\"more-jshint-options\" class=\"anchor\" href=\"#more-jshint-options\"><span class=\"header-link\"></span></a>More JSHint options</h3><p>We&#39;ve just configured an output file to serve as an error log. Next, let&#39;s look at how to customize the kind of rules JSHint enforces. Armed with the <a href=\"http://www.jshint.com/docs/options/\">full list of JSHint flags</a>, we can create a JSON file which we&#39;ll name <code>.jshintrc</code> into our root directory. It looks something like this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"p\">{</span>\n  <span class=\"s2\">&quot;curly&quot;</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"s2\">&quot;eqnull&quot;</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"s2\">&quot;eqeqeq&quot;</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"s2\">&quot;undef&quot;</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"s2\">&quot;globals&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;jQuery&quot;</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>Now, let&#39;s tell JSHint to look at this file for the rules to enforce:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n        <span class=\"nx\">jshint</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">jshintrc</span><span class=\"o\">:</span> <span class=\"s1\">&#39;.jshintrc&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">reporterOutput</span><span class=\"o\">:</span> <span class=\"s1\">&#39;jshint.log&#39;</span>\n            <span class=\"p\">},</span>\n            <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;scripts/*.js&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-jshint&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"take-five\" class=\"anchor\" href=\"#take-five\"><span class=\"header-link\"></span></a>Take five</h3><p>In this recipe, we&#39;ve:</p>\n<ul>\n<li>installed, configured and ran our first <em>real</em> Grunt task;</li>\n<li>learned about targets and multitasks, both of which are wonderful things.</li>\n</ul>\n<p>Feeling adventurous? Give the the very similar plugin <a href=\"https://npmjs.org/package/grunt-contrib-csslint\"><code>grunt-contrib-csslint</code></a> a spin to lint the stylesheets in your project.</p>\n","url":"linting/","dest":"book/chapters/linting/index.html"},{"title":"Sassy Sass","slug":"sass","date":"2014-04-06T16:27:30.000Z","sourcePath":"chapters/03 - Sassy Sass.md","lastModified":"2014-04-06T16:27:30.000Z","content":"<p><strong>Plugins used:</strong> <a href=\"https://npmjs.org/package/grunt-contrib-sass\"><code>grunt-contrib-sass</code></a>.</p>\n<p><strong>Note:</strong> To make <code>grunt-contrib-sass</code> work, you also need to have Ruby and Sass installed. To check if you have ruby installed, type <code>ruby -v</code> in the console. When you&#39;ve confirmed you have Ruby installed, run <code>gem install sass</code> to install Sass.</p>\n<h3><a name=\"install-the-sass-plugin\" class=\"anchor\" href=\"#install-the-sass-plugin\"><span class=\"header-link\"></span></a>Install the Sass plugin</h3><pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install grunt-contrib-sass --save-dev\n</pre></div>\n\n</code></pre>\n<p>and then, in our Gruntfile:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt.loadNpmTasks<span class=\"o\">(</span><span class=\"s1\">&#39;grunt-contrib-sass&#39;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"configure-the-codesasscode-task\" class=\"anchor\" href=\"#configure-the-codesasscode-task\"><span class=\"header-link\"></span></a>Configure the <code>sass</code> task</h3><p>We&#39;ll create a single target called <code>all</code> for our task. We&#39;ll then define a list of source/destination pairs in the <code>files</code> property:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n        <span class=\"nx\">sass</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;css/main.css&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;scss/main.scss&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;css/homepage.css&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;scss/homepage.scss&#39;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-sass&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<p>If you went through the previous chapter, you&#39;ll recall the <code>files</code> property accepts an array of comma-separated file paths. Turns out there are a host of ways to describe the files your tasks needs to operate on, but we&#39;ll talk about that later. For now, let&#39;s examine this form:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;css/main.css&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;scss/main.scss&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;css/homepage.css&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;scss/homepage.scss&#39;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>We&#39;ve defined <code>files</code> as an object with key/value pairs correspond to <em>destination-file</em>/<em>source-file</em>. </p>\n<h3><a name=\"run-the-codesasscode-ask\" class=\"anchor\" href=\"#run-the-codesasscode-ask\"><span class=\"header-link\"></span></a>Run the <code>sass</code> ask</h3><p>Let&#39;s run our task to see how it works:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt sass\n</pre></div>\n\n</code></pre>\n<h3><a name=\"a-better-way-to-define-sourcedestination-pairs\" class=\"anchor\" href=\"#a-better-way-to-define-sourcedestination-pairs\"><span class=\"header-link\"></span></a>A better way to define source/destination pairs</h3><p>This means that for each new Sass file that you add to your project, you&#39;ll need to edit your Gruntfile to include a new source/destination pair in your <code>sass</code> task. Not too sexy. </p>\n<p>Let&#39;s fix that by <em>building the files object dynamically</em>:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n    <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;scss/&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;*.scss&#39;</span><span class=\"p\">],</span>\n    <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;css/&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">ext</span><span class=\"o\">:</span> <span class=\"s1\">&#39;.css&#39;</span>\n<span class=\"p\">}]</span>\n</pre></div>\n\n</code></pre>\n<p>Okay, take a deep breath! There&#39;s a lot going on in the few lines above. First, we&#39;ve moved back to <code>files</code> as an array, but instead of strings describing single paths, we now have objects describing source/destination mappings. How is it done? Let&#39;s look at each property:</p>\n<ul>\n<li><code>expand</code> is set to <code>true</code> so that we can use the properties below:</li>\n<li><code>cwd</code> (current working directory) is the common path to all the source files; in our case, all <code>.scss</code> files are inside the <code>scss</code> folder (note the trailing slash character);</li>\n<li><code>src</code> is an array of one or more patterns to match, relative to <code>cwd</code>;</li>\n<li><code>dest</code> is the counterpart to <code>cwd</code> and describes the destination path prefix; in other words, this is the destination folder for all our generated CSS files;</li>\n<li><code>ext</code> is the new extension for the destination files; in our case, we want all <code>.scss</code> files to become <code>.css</code> files.</li>\n</ul>\n<p>In plain words, the previous construct reads as: </p>\n<blockquote>\n<p>Run all files with the <code>.scss</code> extension from the <code>scss</code> folder through the <code>sass</code> task and place the resulting files in the <code>css</code> folder, each with their original names but with the <code>.css</code> extension instead of <code>.scss</code>.</p>\n</blockquote>\n<p>If you run <code>grunt sass</code> again, you&#39;ll notice that everything still works, but with the added benefit that we add/remove Sass files to your project and they&#39;ll be picked up by the sass task without having to update the Gruntfile each time.</p>\n<p>Read more about the different ways to define files in the chapter <em>Files In-Depth</em>.</p>\n<h3><a name=\"take-five\" class=\"anchor\" href=\"#take-five\"><span class=\"header-link\"></span></a>Take five</h3><p>In this recipe, we&#39;ve learned:</p>\n<ul>\n<li>to write multiple source/destination pairs for the files used by our task;</li>\n<li>to define these pairs dynamically so we don&#39;t have to maintain them, one by one, for all eternity.</li>\n</ul>\n","url":"sass/","dest":"book/chapters/sass/index.html"},{"title":"Pre-compile your Handlebars templates","slug":"handlebars","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/04 - Pre-compile your Handlebars templates.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p><strong>Plugins used:</strong> <a href=\"https://npmjs.org/package/grunt-contrib-handlebars\"><code>grunt-contrib-handlebars</code></a>.</p>\n<p><a href=\"http://handlebarsjs.com/\">Handlebars</a> is a popular template library which helps you build HTML fragments populated with data from an object. A template looks something like:</p>\n<pre><code class=\"lang-html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;post&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h1&gt;</span>{{title}}<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>Published: {{date}}<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n\n</code></pre>\n<p>The portions between <code>{{</code> and <code>}}</code> are dynamic and are populated from the object you feed to the template. If you are not familiar with it, its homepage describes the library in more depth.</p>\n<p>There are two basic ways to include Handlebars templates in your web application:</p>\n<ol>\n<li><p>Inline them as strings in JavaScript: </p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre> <span class=\"kd\">var</span> <span class=\"nx\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;div class=&#39;post&#39;&gt;&lt;h1&gt;{{title}}&lt;/h1&gt;&lt;p&gt;Published: {{date}}&lt;/p&gt;&lt;/div&gt;&quot;</span><span class=\"p\">;</span>\n</pre></div>\n\n</code></pre>\n<p> This is bad because we&#39;re mixing JavaScript and HTML, and it&#39;s not too readable either.</p>\n</li>\n<li><p>Include them in the HTML inside <code>&lt;script&gt;</code> tags:</p>\n<pre><code class=\"lang-html\"><div class=\"highlight\"><pre> <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">&#39;text/x-handlebars&#39;</span> <span class=\"na\">id=</span><span class=\"s\">&#39;post-template&#39;</span><span class=\"nt\">&gt;</span>\n     <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"kr\">class</span><span class=\"o\">=</span><span class=\"s2\">&quot;post&quot;</span><span class=\"o\">&gt;</span>\n       <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"p\">{{</span><span class=\"nx\">title</span><span class=\"p\">}}</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n       <span class=\"o\">&lt;</span><span class=\"nx\">p</span><span class=\"o\">&gt;</span><span class=\"nx\">Published</span><span class=\"o\">:</span> <span class=\"p\">{{</span><span class=\"nx\">date</span><span class=\"p\">}}</span><span class=\"o\">&lt;</span><span class=\"err\">/p&gt;</span>\n     <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n <span class=\"nt\">&lt;/script&gt;</span>\n</pre></div>\n\n</code></pre>\n<p> This is somewhat better, but includes the extra step of querying the DOM for the script element and reading its content as a string (<code>element.innerHTML</code>). In addition, the HTML file containing all these templates can get quite large and unmaintainable.</p>\n</li>\n</ol>\n<p>Both techniques, as described, only get you to the point where you have the content of the template as a string. From hereon, you need to perform two additional steps:</p>\n<ol>\n<li>First, compile the string into a template function;</li>\n<li>Call the template function with a data object to get the HTML fragment.</li>\n</ol>\n<p>Let&#39;s see how <code>grunt-contrib-handlebars</code> can make this all better.</p>\n<h3><a name=\"the-advantages-of-pre-compiling-your-templates\" class=\"anchor\" href=\"#the-advantages-of-pre-compiling-your-templates\"><span class=\"header-link\"></span></a>The advantages of pre-compiling your templates</h3><p>Here&#39;s what&#39;s in it for you: </p>\n<ul>\n<li>You get to keep your templates in separate files, without the performance penalty of separate HTTP requests for each one;</li>\n<li>You make your app faster by skipping the DOM queries and the compilation step;</li>\n<li>You reduce the payload by including only the Handlebars Runtime library, which is smaller and faster, instead of the whole shebang.</li>\n</ul>\n<p>Sold? Right, let&#39;s get on with it.</p>\n<h3><a name=\"install-the-codehandlebarscode-task\" class=\"anchor\" href=\"#install-the-codehandlebarscode-task\"><span class=\"header-link\"></span></a>Install the <code>handlebars</code> task</h3><pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install grunt-contrib-handlebars --save-dev\n</pre></div>\n\n</code></pre>\n<p>and then add it to your Gruntfile:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt.loadNpmTasks<span class=\"o\">(</span><span class=\"s1\">&#39;grunt-contrib-handlebars&#39;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"configure-the-codehandlebarscode-task\" class=\"anchor\" href=\"#configure-the-codehandlebarscode-task\"><span class=\"header-link\"></span></a>Configure the <code>handlebars</code> task</h3><p>In its most basic form, we only need to define the <em>source</em> and <em>destination</em> files. Assuming the following file structure:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>my-project/\n    templates/\n        posts/\n            list.hbs\n            detail.hbs\n        home.hbs\n    js/\n    Gruntfile.js\n    package.json\n</pre></div>\n\n</code></pre>\n<p>We can write:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">handlebars</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;js/templates.js&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;templates/**/*.hbs&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>Let&#39;s run this to see what happens:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt handlebars\n</pre></div>\n\n</code></pre>\n<p>Grunt will take all files with a <code>.hbs</code> extension from the <code>templates</code> folder and all its sub-folders and merge them into a single file called <code>templates.js</code>. You can now include it in your HTML:</p>\n<pre><code class=\"lang-html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">&#39;text/javascript&#39;</span> <span class=\"na\">src=</span><span class=\"s\">&#39;js/templates.js&#39;</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</pre></div>\n\n</code></pre>\n<p>Inspecting <code>JST</code> in Developer Tools, we&#39;ll see it&#39;s an object whose keys are the names of the templates and whose values are the Handlebars templating functions for each:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"o\">&gt;</span> <span class=\"nx\">JST</span>\n<span class=\"nb\">Object</span>\n    <span class=\"nx\">templates</span><span class=\"o\">/</span><span class=\"nx\">home</span><span class=\"p\">.</span><span class=\"nx\">hbs</span>          <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{...}</span>\n    <span class=\"nx\">templates</span><span class=\"o\">/</span><span class=\"nx\">posts</span><span class=\"o\">/</span><span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">hbs</span>    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{...}</span>\n    <span class=\"nx\">templates</span><span class=\"o\">/</span><span class=\"nx\">posts</span><span class=\"o\">/</span><span class=\"nx\">detail</span><span class=\"p\">.</span><span class=\"nx\">hbs</span>  <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{...}</span>\n</pre></div>\n\n</code></pre>\n<p>In your JavaScript code, we use the templates as follows:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">post</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;My First Post&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">date</span><span class=\"o\">:</span> <span class=\"s1\">&#39;10/10/2013&#39;</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">postTemplate</span> <span class=\"o\">=</span> <span class=\"nx\">JST</span><span class=\"p\">[</span><span class=\"s1\">&#39;templates/post/detail.hbs&#39;</span><span class=\"p\">];</span>\n<span class=\"kd\">var</span> <span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"nx\">postTemplate</span><span class=\"p\">(</span><span class=\"nx\">post</span><span class=\"p\">);</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"customize-the-names\" class=\"anchor\" href=\"#customize-the-names\"><span class=\"header-link\"></span></a>Customize the names</h3><p>In real life, you&#39;ll probably want to add the templates under your application&#39;s namespace &mdash; something like <code>MyApp.Templates</code> &mdash; instead of <code>JST</code>. This is done using the <code>namespace</code> option:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">handlebars</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">namespace</span><span class=\"o\">:</span> <span class=\"s1\">&#39;MyApp.Templates&#39;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;js/templates.js&quot;</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;templates/**/*.hbs&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>Let&#39;s also get rid of the cruft in our template names &mdash; doesn&#39;t <code>posts/detail</code> look better than <code>templates/posts/detail.hbs</code>? We can accomplish this by using the <code>processName</code> option, which accepts a function with one argument (the file path) and returns the string to use as the template name:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">namespace</span><span class=\"o\">:</span> <span class=\"s1\">&#39;MyApp.Templates&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">processName</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">filePath</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">filePath</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/^templates\\//</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">).</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\.hbs$/</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>So, by removing the <code>templates/</code> prefix and the <code>.hbs</code> suffix from the file paths, we gen nice clean template names:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"o\">&gt;</span> <span class=\"nx\">MyApp</span><span class=\"p\">.</span><span class=\"nx\">Templates</span>\n    <span class=\"nx\">home</span>            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{...}</span>\n    <span class=\"nx\">posts</span><span class=\"o\">/</span><span class=\"nx\">list</span>      <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{...}</span>\n    <span class=\"nx\">posts</span><span class=\"o\">/</span><span class=\"nx\">detail</span>    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{...}</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"what-about-partials\" class=\"anchor\" href=\"#what-about-partials\"><span class=\"header-link\"></span></a>What about partials?</h3><p>In templating languages, <em>partials</em> are templates that can be reused in other templates. In Handlebars, you use the <code>{{&gt; partial }}</code> helper to include partials. Let&#39;s take an example:</p>\n<pre><code class=\"lang-html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">&#39;text/x-handlebars&#39;</span> <span class=\"na\">id=</span><span class=\"s\">&#39;post-list-template&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">h2</span><span class=\"o\">&gt;</span><span class=\"p\">{{</span> <span class=\"nx\">title</span> <span class=\"p\">}}</span><span class=\"o\">&lt;</span><span class=\"err\">/h2&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span>\n        <span class=\"p\">{{</span><span class=\"err\">#</span><span class=\"nx\">each</span> <span class=\"nx\">posts</span><span class=\"p\">}}</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">li</span><span class=\"o\">&gt;</span><span class=\"p\">{{</span><span class=\"o\">&gt;</span> <span class=\"nx\">post</span><span class=\"o\">-</span><span class=\"nx\">item</span><span class=\"p\">}}</span><span class=\"o\">&lt;</span><span class=\"err\">/li&gt;</span>\n        <span class=\"p\">{{</span><span class=\"err\">/each}}</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/ul&gt;</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n\n<span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">&#39;text/x-handlebars&#39;</span> <span class=\"na\">id=</span><span class=\"s\">&#39;post-item-template&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">span</span> <span class=\"kr\">class</span><span class=\"o\">=</span><span class=\"s1\">&#39;post&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">{{</span> <span class=\"nx\">title</span> <span class=\"p\">}}</span> <span class=\"o\">-</span> <span class=\"p\">{{</span> <span class=\"nx\">date</span> <span class=\"p\">}}</span><span class=\"o\">&lt;</span><span class=\"err\">/span&gt;</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</pre></div>\n\n</code></pre>\n<p>We have two templates, one for the list of posts, and one for an individual item in the list. The former is a normal template, while the latter is used as a partial. To make everything happen, you&#39;d write in your JavaScript code:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">listString</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;post-list-template&#39;</span><span class=\"p\">).</span><span class=\"nx\">innerHTML</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">itemString</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;post-item-template&#39;</span><span class=\"p\">).</span><span class=\"nx\">innerHTML</span><span class=\"p\">;</span>\n\n<span class=\"nx\">Handlebars</span><span class=\"p\">.</span><span class=\"nx\">registerPartial</span><span class=\"p\">(</span><span class=\"s1\">&#39;post-item&#39;</span><span class=\"p\">,</span> <span class=\"nx\">itemString</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">template</span> <span class=\"o\">=</span> <span class=\"nx\">Handlebars</span><span class=\"p\">.</span><span class=\"nx\">compile</span><span class=\"p\">(</span><span class=\"nx\">listString</span><span class=\"p\">);</span>\n\n<span class=\"nx\">template</span><span class=\"p\">({</span>\n    <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;All posts&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">posts</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;First post&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;10/10/2013&#39;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Second post&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;10/11/2013&#39;</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>    \n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre>\n<p>Which outputs the expected markup:</p>\n<pre><code class=\"lang-html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;h2&gt;</span>All posts<span class=\"nt\">&lt;/h2&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&#39;post&#39;</span><span class=\"nt\">&gt;</span>First post - 10/10/2013<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&#39;post&#39;</span><span class=\"nt\">&gt;</span>Second post - 10/10/2013<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</pre></div>\n\n</code></pre>\n<p><strong>Note:</strong> It&#39;s important to register the partial <em>before</em> compiling any template that includes it, otherwise it will throw an error.</p>\n<p>Let&#39;s see how the <code>handlebars</code> task works with partials. First, let&#39;s create a <code>_list-item.hbs</code> in our <code>templates</code> folder:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>my-project/\n    templates/\n        posts/\n            _list-item.hbs\n            list.hbs\n            detail.hbs\n        home.hbs\n    js/\n    Gruntfile.js\n    package.json\n</pre></div>\n\n</code></pre>\n<p>If we run <code>grunt handlebars</code> again, we&#39;ll see that our <code>MyApp.Templates</code> does not include our newly created template. That&#39;s because the <code>handlebars</code> task assumes all files that start with <code>_</code> are partials and registers them using <code>Handlebars.registerPartial()</code> &mdash; internally, they&#39;re kept in the <code>Handlebars.partials</code> array.</p>\n<p>Now we can just write:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">template</span> <span class=\"o\">=</span> <span class=\"nx\">MyApp</span><span class=\"p\">.</span><span class=\"nx\">Templates</span><span class=\"p\">[</span><span class=\"s1\">&#39;posts/list&#39;</span><span class=\"p\">];</span>\n<span class=\"nx\">template</span><span class=\"p\">({</span>\n    <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;All posts&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">posts</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;First post&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;10/10/2013&#39;</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Second post&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;10/11/2013&#39;</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>    \n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre>\n<p>and it works wonderfully!</p>\n<h3><a name=\"take-five\" class=\"anchor\" href=\"#take-five\"><span class=\"header-link\"></span></a>Take five</h3><p>In this recipe, we made Handlebars templates better in terms of speed and maintainability by moving them to separate <code>.hbs</code> files.</p>\n<p><strong>Tip:</strong> For even <em>more</em> goodness, install Handlebars syntax highlighting in your favorite editor &mdash; I use <a href=\"https://github.com/nrw/sublime-text-handlebars\">sublime-text-handlebars</a> for Sublime Text.</p>\n","url":"handlebars/","dest":"book/chapters/handlebars/index.html"},{"title":"Watch for changes","slug":"watch","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/05 - Watch for changes.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p><strong>Plugins used:</strong> <a href=\"https://npmjs.org/package/grunt-contrib-watch\"><code>grunt-contrib-watch</code></a>.</p>\n<p>In the previous recipes, we saw how we can compile our Sass files into CSS files and merge your Handlebars templates into a single JST file. It is somewhat magical, but to run <code>grunt sass handlebars</code> after every change is far from being productive. Let&#39;s take this up a notch and make our files re-compile automatically every time we make a change to them. For this we will use the <code>watch</code> task provided by <code>grunt-contrib-watch</code>. </p>\n<p>As usual, let&#39;s install it in our project:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install grunt-contrib-watch\n</pre></div>\n\n</code></pre>\n<p>and load the tasks in our Gruntfile, after our <code>sass</code> and <code>handlebars</code> tasks:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n        <span class=\"nx\">sass</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n                    <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                    <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;scss/&#39;</span><span class=\"p\">,</span>\n                    <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;*.scss&#39;</span><span class=\"p\">],</span>\n                    <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;css/&#39;</span><span class=\"p\">,</span>\n                    <span class=\"nx\">ext</span><span class=\"o\">:</span> <span class=\"s1\">&#39;.css&#39;</span>\n                <span class=\"p\">}]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">handlebars</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;js/templates.js&#39;</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;templates/**/*.hbs&#39;</span><span class=\"p\">]</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-sass&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-handlebars&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-watch&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"configuring-the-codewatchcode-task\" class=\"anchor\" href=\"#configuring-the-codewatchcode-task\"><span class=\"header-link\"></span></a>Configuring the <code>watch</code> task</h3><p>There are really only two things we need to define:</p>\n<ol>\n<li>the files we want to watch;</li>\n<li>the task(s) to run when the files change.</li>\n</ol>\n<p>So let&#39;s go ahead and do that:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n        <span class=\"nx\">sass</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n                    <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                    <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;scss/&#39;</span><span class=\"p\">,</span>\n                    <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;*.scss&#39;</span><span class=\"p\">],</span>\n                    <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;css/&#39;</span><span class=\"p\">,</span>\n                    <span class=\"nx\">ext</span><span class=\"o\">:</span> <span class=\"s1\">&#39;.css&#39;</span>\n                <span class=\"p\">}]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n\n        <span class=\"nx\">handlebars</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;js/templates.js&#39;</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;templates/**/*.hbs&#39;</span><span class=\"p\">]</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n\n        <span class=\"nx\">watch</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">sass</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;scss/**/*.scss&#39;</span><span class=\"p\">],</span>\n                <span class=\"nx\">tasks</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;sass&#39;</span><span class=\"p\">]</span>\n            <span class=\"p\">},</span>\n            <span class=\"nx\">handlebars</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;templates/**/*.hbs&#39;</span><span class=\"p\">],</span>\n                <span class=\"nx\">tasks</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;handlebars&#39;</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-sass&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-handlebars&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-watch&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<p>We&#39;ve created <em>two targets</em> for our task, one for watching the Sass files and one for watching the Handlebars templates. In both instances, we&#39;ve used <em>wildcards</em> to define patterns to match all desired files. The <code>scss/**/*.scss</code> pattern is similar to <code>scss/*.scss</code> (i.e. match all files with the <code>.scss</code> extension within the <code>scss</code> folder) with the exception that the former looks into subfolders as well &mdash; you can read all about it in the <em>Files in-depth</em> chapter. </p>\n<p>When any of the targeted files change, the associated task is executed.</p>\n<p>Let&#39;s check it out in action:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt watch\n</pre></div>\n\n</code></pre>\n<p>Because <code>watch</code> is a <em>multitask</em>, what we&#39;re actually saying with the above command is:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt watch:sass watch:handlebars\n</pre></div>\n\n</code></pre>\n<p>Now go ahead and change one of your Sass files, and notice that the <code>sass</code> task is run. At the same time, if a Handlebars template changes, the <code>handlebars</code> task is run.</p>\n<p><strong>Note:</strong> In our example, we&#39;re running a single task with each change, but in effect the <code>tasks</code> option can take an array of tasks to be run in sequence. You can even include specific targets for each task, e.g.:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">watch</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sass</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;scss/**/*.scss&#39;</span><span class=\"p\">],</span>\n        <span class=\"nx\">tasks</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;sass:all&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;csslint:all&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<h4><a name=\"a-note-about-persistent-tasks\" class=\"anchor\" href=\"#a-note-about-persistent-tasks\"><span class=\"header-link\"></span></a>A note about persistent tasks</h4><p>Some tasks such as <code>watch</code> or <code>connect</code> (about which we&#39;ll learn in the next chapter) are persistent, in the sense that once you start them they run in the background as long as the console is open. To stop a persistent task without closing the console, use <code>Ctrl+C</code>.</p>\n<h3><a name=\"tweaking-the-watch-behavior\" class=\"anchor\" href=\"#tweaking-the-watch-behavior\"><span class=\"header-link\"></span></a>Tweaking the watch behavior</h3><p>By default, <code>watch</code> looks for three kinds of changes: </p>\n<ul>\n<li>files that were <em>added</em> to the project and match the pattern;</li>\n<li>matching files files that were <em>deleted</em>;</li>\n<li>matching files that were <em>changed</em>. </li>\n</ul>\n<p>This behavior is controlled by the <code>events</code> option, which can have one or many of the values: <code>all</code> (the default), <code>changed</code>, <code>added</code> and <code>deleted</code>. Let&#39;s assume we want to run the <code>handlebars</code> task only when a template is added or deleted &mdash; an no, it doesn&#39;t make sense in a real-world scenario, but go with me:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">watch</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">handlebars</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;templates/**/*.hbs&#39;</span><span class=\"p\">],</span>\n        <span class=\"nx\">tasks</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;handlebars&#39;</span><span class=\"p\">],</span>\n        <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">events</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;added&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;deleted&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>This will make the watch ignore changes in existing Handlebars templates and only react when we add or remove Handlebars templates.</p>\n<p>Alrighty then.</p>\n<p>There&#39;s one little quirk we need to address: the <code>watch</code> task will only pick up on changes that happen <em>after</em> we call <code>grunt task</code>. We&#39;d like to make sure our generated CSS and compiled templates are up-to-date when the watch starts. For this, we will use <code>atBegin: true</code> to run <em>all tasks</em> associated with the watch before the actual watching begins. Because we want this behavior for both Sass and Handlebars files, we will add this option on the task directly rather than on each target:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">watch</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">atBegin</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">sass</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;scss/**/*.scss&#39;</span><span class=\"p\">],</span>\n        <span class=\"nx\">tasks</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;sass&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">handlebars</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;templates/**/*.hbs&#39;</span><span class=\"p\">],</span>\n        <span class=\"nx\">tasks</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;handlebars&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"take-five\" class=\"anchor\" href=\"#take-five\"><span class=\"header-link\"></span></a>Take five</h3><p>In this recipe, we&#39;ve:</p>\n<ul>\n<li>learned how to use <code>watch</code> to trigger other tasks automatically when you make changes to your files;</li>\n<li>configured the types of events the watch responds to;</li>\n<li>run the associated tasks at the beginning of the watch process to make sure everything is up to date.</li>\n</ul>\n","url":"watch/","dest":"book/chapters/watch/index.html"},{"title":"Start a server","slug":"server","date":"2014-10-13T19:38:28.000Z","sourcePath":"chapters/06 - Start a server.md","lastModified":"2014-10-13T19:38:28.000Z","content":"<p><strong>Using:</strong> <a href=\"https://npmjs.org/package/grunt-contrib-connect\"><code>grunt-contrib-connect</code></a></p>\n<p>When working on a project on your machine you need a web server installed locally to test AJAX features or web fonts from services such as Typekit. </p>\n<p>You might be tempted to use an AMP stack &mdash; a fancy way of calling a bundle of Apache, MySQL and PHP &mdash; but it&#39;s a hassle to link your projects to its <code>www</code> folder (I&#39;m lazy) and most of the time you&#39;ll use 1% of its features anyway. Plus, let&#39;s be honest, it feels a little retro. </p>\n<p>If you have Python installed, you can simply run this in your project folder instead:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>python -m SimpleHTTPServer // <span class=\"k\">for </span>Python 2.x\npython -m http.server // <span class=\"k\">for </span>Python 3.x\n</pre></div>\n\n</code></pre>\n<p>It will start a web server through which you can access your project at <code>http://localhost:8000</code>.</p>\n<p>In this chapter, we&#39;ll learn how to configure the <code>connect</code> task to obtain a similar result, plus a few other perks.</p>\n<h3><a name=\"install-the-codeconnectcode-task\" class=\"anchor\" href=\"#install-the-codeconnectcode-task\"><span class=\"header-link\"></span></a>Install the <code>connect</code> task</h3><pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install grunt-contrib-connect --save-dev\n</pre></div>\n\n</code></pre>\n<p>and then load it into  your Gruntfile:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt.loadNpmTasks<span class=\"o\">(</span><span class=\"s1\">&#39;grunt-contrib-connect&#39;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"configure-a-persistent-server\" class=\"anchor\" href=\"#configure-a-persistent-server\"><span class=\"header-link\"></span></a>Configure a persistent server</h3><p>To create a persistent server (one which does not stop after Grunt tasks have completed), we will use <code>keepalive: true</code>:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>connect: <span class=\"o\">{</span>\n    server: <span class=\"o\">{</span>\n        options: <span class=\"o\">{</span>\n            keepalive: <span class=\"nb\">true</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n</code></pre>\n<p>We&#39;ve created a single target called <code>server</code> for our <code>connect</code> task.</p>\n<h3><a name=\"run-your-server\" class=\"anchor\" href=\"#run-your-server\"><span class=\"header-link\"></span></a>Run your server</h3><pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt connect:server\n</pre></div>\n\n</code></pre>\n<p>Now go to <code>http://localhost:8000</code> and you should be able to browse your app, and see your <code>index.html</code> if you have one.</p>\n<h3><a name=\"more-server-configuration\" class=\"anchor\" href=\"#more-server-configuration\"><span class=\"header-link\"></span></a>More server configuration</h3><p>You can customize the host name, port and protocol for your server:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">connect</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">server</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">keepalive</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nx\">protocol</span><span class=\"o\">:</span> <span class=\"s1\">&#39;https&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">hostname</span><span class=\"o\">:</span> <span class=\"s1\">&#39;myapp&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"s1\">&#39;8080&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>The code above makes the server available at <code>https://myapp:8080</code>. This is useful in the case you want to start several servers at once, with different base directories, as in the example below:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">connect</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">first</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">keepalive</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nx\">hostname</span><span class=\"o\">:</span> <span class=\"s1\">&#39;firstsite&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">base</span><span class=\"o\">:</span> <span class=\"s1\">&#39;first-site&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">second</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">keepalive</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nx\">hostname</span><span class=\"o\">:</span> <span class=\"s1\">&#39;secondsite&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">base</span><span class=\"o\">:</span> <span class=\"s1\">&#39;second-site&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>This makes the directories <code>first-site</code> and <code>second-site</code> from your project available at <code>http://firstite:8000</code> and <code>http://secondsite:8000</code>, respectively.</p>\n<h3><a name=\"routing-everything-back-to-index-html\" class=\"anchor\" href=\"#routing-everything-back-to-index-html\"><span class=\"header-link\"></span></a>Routing everything back to index.html</h3><p>If you&#39;re writing a Single-Page Web Application that uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\">HTML5 History API</a>, you&#39;ll be disappointed to find that your skillfully crafted URLs don&#39;t withstand a page refresh. The web server assumes a path like <code>http://localhost:8000/posts/100</code> points to a physical file and, failing to find it in your project, throws a <em>404 Not Found</em> error.</p>\n<p>Let&#39;s fix this by writing a custom <em>middleware</em> for the <code>connect</code> task to redirect paths that don&#39;t correspond to physical files back to <code>index.html</code>.</p>\n<p>For this we will be using the <code>connect-modrewrite</code> plugin. It&#39;s not specifically written for Grunt, but we use it in the same way. Let&#39;s install it:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install connect-modrewrite --save-dev\n</pre></div>\n\n</code></pre>\n<p>And then use it in our Gruntfile:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">rewrite</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;connect-modrewrite&#39;</span><span class=\"p\">);</span>\n</pre></div>\n\n</code></pre>\n<p>Let&#39;s see how we can use it in our <code>connect</code> task:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">rewrite</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;connect-modrewrite&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n    <span class=\"nx\">connect</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">server</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">keepalive</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nx\">hostname</span><span class=\"o\">:</span> <span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">middleware</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">connect</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">middlewares</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                <span class=\"c1\">// the rules that shape our mod-rewrite behavior</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">rules</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"s1\">&#39;!\\\\.html|\\\\.js|\\\\.css|\\\\.svg|\\\\.jp(e?)g|\\\\.png|\\\\.gif$ /index.html&#39;</span>\n                <span class=\"p\">];</span>\n\n                <span class=\"c1\">// add rewrite as first item in the chain of middlewares</span>\n                <span class=\"nx\">middlewares</span><span class=\"p\">.</span><span class=\"nx\">unshift</span><span class=\"p\">(</span><span class=\"nx\">rewrite</span><span class=\"p\">(</span><span class=\"nx\">rules</span><span class=\"p\">));</span>\n\n                <span class=\"k\">return</span> <span class=\"nx\">middlewares</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre>\n<p>We&#39;ve written a custom <code>middleware</code> function which returns an array of chained middleware. We&#39;re inserting our rewrite middleware at the beginning of an existing chain which includes by default a static file server and which is sent to our function as the third argument. Our rewrite middleware contains a single rule which states that all files except HTML, stylesheets, scripts and images should be redirected to <code>index.html</code>.</p>\n<h3><a name=\"testing-on-other-devices\" class=\"anchor\" href=\"#testing-on-other-devices\"><span class=\"header-link\"></span></a>Testing on other devices</h3><p>To make our app available to other devices &mdash; like a phone or tablet connected to the same network as our development machine &mdash; we need to make one small adjustment:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">hostname</span><span class=\"o\">:</span> <span class=\"s1\">&#39;*&#39;</span>\n</pre></div>\n\n</code></pre>\n<p>Now you can test your app on any device by going to <code>http://ip-address:8000</code>. </p>\n<p><strong>Note:</strong> To find out your machine&#39;s IP, run <code>ifconfig</code> in the command line and look for the IP next to <code>inet addr</code>. On Windows, you run <code>ipconfig</code> and look for <code>IPv4 Address</code>.</p>\n<h3><a name=\"take-five\" class=\"anchor\" href=\"#take-five\"><span class=\"header-link\"></span></a>Take five</h3><p>In this recipe, we&#39;ve done quite a few things:</p>\n<ul>\n<li>we learned how to use the <code>connect</code> task to start a local server;</li>\n<li>we made it useful for developing apps that use the HTML5 History API by redirecting all paths that don&#39;t correspond to static assets back to the main HTML;</li>\n<li>we configured the server so that we can test our app on other devices.</li>\n</ul>\n","url":"server/","dest":"book/chapters/server/index.html"},{"title":"Build an app for deployment","slug":"building","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/07 - Build an app for deployment.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p>By now, you should be comfortable with working with one task at a time. It&#39;s time to really make Grunt shine by integrating the variety of tasks involved in preparing a web application for deployment, such as precompiling, minifying, concatenating and moving files around.</p>\n<h3><a name=\"what-we39re-trying-to-accomplish\" class=\"anchor\" href=\"#what-we39re-trying-to-accomplish\"><span class=\"header-link\"></span></a>What we&#39;re trying to accomplish</h3><p>We want to take our main HTML file, identify all the stylesheets and scripts it references, optimize those (e.g. minification, concatenation) and then update the references from the HTML with the optimized version.</p>\n<p>At the end of the task, we want to have a <code>dist</code> folder that contains the optimized version of our project, readily deployable to a production environment.</p>\n<h3><a name=\"tasks-we39ll-use-in-this-recipe\" class=\"anchor\" href=\"#tasks-we39ll-use-in-this-recipe\"><span class=\"header-link\"></span></a>Tasks we&#39;ll use in this recipe</h3><ul>\n<li><a href=\"https://npmjs.org/package/grunt-contrib-uglify\"><code>grunt-contrib-uglify</code></a> to minify JavaScript;</li>\n<li><a href=\"https://npmjs.org/package/grunt-contrib-cssmin\"><code>grunt-contrib-cssmin</code></a> to minify CSS;</li>\n<li><a href=\"https://npmjs.org/package/grunt-contrib-htmlmin\"><code>grunt-contrib-htmlmin</code></a> to minify gruntde;</li>\n<li><a href=\"https://npmjs.org/package/grunt-contrib-concat\"><code>HTML-contrib-concat</code></a> to concatenate files;</li>\n<li><a href=\"https://npmjs.org/package/grunt-contrib-copy\"><code>grunt-contrib-copy</code></a> to copy files and folders;</li>\n<li><a href=\"https://github.com/yeoman/grunt-usemin\"><code>grunt-usemin</code></a> to replaces references to scripts and stylesheets in HTML files with their optimized versions.</li>\n</ul>\n<p>Now, don&#39;t get too intimidated! If you think about it each task has a very specific purpose in the workflow, and you&#39;ll see how easy is to choreograph them into one fluent, beautiful task.</p>\n<h3><a name=\"let39s-install-everything\" class=\"anchor\" href=\"#let39s-install-everything\"><span class=\"header-link\"></span></a>Let&#39;s install everything</h3><pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install grunt-contrib-uglify grunt-contrib-concat grunt-contrib-cssmin grunt-contrib-htmlmin grunt-contrib-copy grunt-usemin --save-dev\n</pre></div>\n\n</code></pre>\n<p>... in one fell swoop, even. Now let&#39;s add all of it to our Gruntfile:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-uglify&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-concat&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-cssmin&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-htmlmin&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-contrib-copy&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-usemin&#39;</span><span class=\"p\">);</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"basic-configuration\" class=\"anchor\" href=\"#basic-configuration\"><span class=\"header-link\"></span></a>Basic configuration</h3><pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n\n    <span class=\"c1\">// Minimize tasks</span>\n    <span class=\"nx\">cssmin</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;dist/css/app.css&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/css/**/*.css&#39;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nx\">htmlmin</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n                <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;**/*.html&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist/&#39;</span>\n            <span class=\"p\">}]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\">// Move other things around</span>\n    <span class=\"nx\">copy</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n                <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist/&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                    <span class=\"s1\">&#39;.htaccess&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;*.ico&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;images/**/*.{jpg,png,gif}&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;css/fonts/*&#39;</span>\n                <span class=\"p\">]</span>        \n            <span class=\"p\">}]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre>\n<p>Let&#39;s take the code above apart, piece by piece.</p>\n<p>First, we configure the <code>cssmin</code> task to take all stylesheets from <code>app/css</code> and minimize and concatenate them in a single file in <code>dist/css</code> called <code>app.css</code>.\nWe do the same for HTML, except we&#39;re using a dynamic declaration of the files object since we want to have a separate HTML file in the <code>dist</code> folder for each HTML in our <code>app</code> folder.</p>\n<p>Then we configure the <code>copy</code> task to copy into the <code>dist</code> folder one by one any files not already covered by the other tasks &mdash; stuff like icons, images, fonts, etc.  </p>\n<p>We already notice we&#39;ve been using <code>app</code> and <code>dist</code> a lot, so let me take this moment to introduce a handy way to Not Repeat Yourself: enter <strong>Grunt templates</strong>. They are tiny dynamic snippets delimited by <code>&lt;%</code> and <code>%&gt;</code> that you can add to your strings. We&#39;re interested in templates of the form <code>&lt;%= object.property.path %&gt;</code> which expands to the corresponding value from Grunt&#39;s configuration object. Let&#39;s see it in action:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n\n    <span class=\"nx\">appConfig</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">appRoot</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">distRoot</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist&#39;</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\">// Minimize tasks</span>\n    <span class=\"nx\">cssmin</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;&lt;%= appConfig.distRoot %&gt;/css/app.css&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= appConfig.appRoot %&gt;/css/**/*.css&#39;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nx\">htmlmin</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n                <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= appConfig.appRoot %&gt;/&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;**/*.html&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= appConfig.distRoot %&gt;&#39;</span>\n            <span class=\"p\">}]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"c1\">// Move other things around</span>\n    <span class=\"nx\">copy</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n                <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n                <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= appConfig.appRoot %&gt;/&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= appConfig.distRoot %&gt;&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                    <span class=\"s1\">&#39;.htaccess&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;*.ico&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;images/**/*.{jpg,png,gif}&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;css/fonts/*&#39;</span>\n                <span class=\"p\">]</span>        \n            <span class=\"p\">}]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre>\n<p>We&#39;ve defined an <code>appConfig</code> property to hold our commonly-used paths. Now we can refer to the two paths as <code>&lt;%= appConfig.appRoot %&gt;</code> and <code>&lt;%= appConfig.distRoot %&gt;</code> in all our tasks.</p>\n<p><strong>Note:</strong> You can define any number of custom properties in your Grunt configuration (like we did above with <code>appConfig</code>), but make sure the names don&#39;t conflict with any task names and stay away from the <code>grunt</code> keyword, which is reserved to access the Grunt object in the templates.</p>\n<p>Another cool thing we can do is to get a timestamp for the current Grunt run and add that to the generated CSS/JS files to ensure they are unique.</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"p\">{</span>\n    <span class=\"nx\">appConfig</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">appRoot</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">distRoot</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">timestamp</span><span class=\"o\">:</span> <span class=\"nb\">Date</span><span class=\"p\">.</span><span class=\"nx\">now</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>And here&#39;s how we might use this to append the timestamp to our generated CSS file in <code>cssmin</code>:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">cssmin</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;&lt;%= appConfig.distRoot %&gt;/css/app.&lt;%= appConfig.timestamp %&gt;.css&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= appConfig.appRoot %&gt;/css/**/*.css&#39;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"take-five\" class=\"anchor\" href=\"#take-five\"><span class=\"header-link\"></span></a>Take five</h3>","url":"building/","dest":"book/chapters/building/index.html"},{"title":"Files, in-depth","slug":"files","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/08 - Files in-depth.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p>Tasks can be:</p>\n<ul>\n<li>single tasks or multitasks;</li>\n<li>read-only tasks or read-write tasks.</li>\n<li>one-to-one tasks or many-to-one tasks.</li>\n</ul>\n<p>Multi-tasks work by taking source files and mapping them to destination files. For each destination, you can define one or more source files. Let&#39;s look at the ways to define files:</p>\n<h3><a name=\"compact-mode\" class=\"anchor\" href=\"#compact-mode\"><span class=\"header-link\"></span></a>Compact mode</h3><p>todo.</p>\n<h3><a name=\"files-object-format\" class=\"anchor\" href=\"#files-object-format\"><span class=\"header-link\"></span></a>Files object format</h3><p>In the Files Object Format, you specify a <code>files</code> object that has:</p>\n<ul>\n<li>the destination file as key</li>\n<li>a string or array of strings to define the source file(s) for the destination</li>\n</ul>\n<p>It looks something like this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;dist/file1.js&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/file1.js&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;dist/combined.js&#39;</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;app/file1.js&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;app/file2.js&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;app/file3.js&#39;</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>The first line defines one source for the destination file, while the second defines multiple source files for the destination.</p>\n<h3><a name=\"files-array-format\" class=\"anchor\" href=\"#files-array-format\"><span class=\"header-link\"></span></a>Files Array Format</h3><p>The Files Array Format is the canonical form of defining source/destination pairs. Grunt converts all the other formats to the Files Array Format before sending them to the task. It&#39;s very similar to the Files Object format, except we explicitly define the <code>src</code> and <code>dest</code> properties:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n    <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/file1.js&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist/file1.js&#39;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n    <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;app/file1.js&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;app/file2.js&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;app/file3.js&#39;</span><span class=\"p\">],</span>\n    <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist/combined.js&#39;</span>\n<span class=\"p\">}]</span>\n</pre></div>\n\n</code></pre>\n<p>It has the advantage of allowing us to specify additional properties, such as:</p>\n<ul>\n<li><code>dot</code>, allows patterns to match file names that start with a period (e.g. <code>.gitignore</code>), even if the pattern does not explicitly have a period there;</li>\n<li><code>filter</code>, which allows us to match files or folders specifically (e.g. filter: &#39;isFile&#39; will filter out folders)/</li>\n</ul>\n<p>... and a couple of others.</p>\n<h3><a name=\"patterns\" class=\"anchor\" href=\"#patterns\"><span class=\"header-link\"></span></a>Patterns</h3><ul>\n<li><code>?</code> matches a single character, excluding <code>/</code>;</li>\n<li><code>*</code> matches any number of characters, <em>excluding</em> <code>/</code>;</li>\n<li><code>**</code> matches any number of characters, <em>including</em> <code>/</code>;</li>\n<li>Use <code>{}</code> to define a comma-separated list of alternatives, such as <code>{backbone,jquery}.min.js</code>, which will match <code>backbone.min.js</code> and <code>jquery.min.js</code>;</li>\n<li>Use <code>!</code> to exclude a match.</li>\n</ul>\n<h4><a name=\"a-few-common-patterns\" class=\"anchor\" href=\"#a-few-common-patterns\"><span class=\"header-link\"></span></a>A few common patterns</h4><p>Let&#39;s assume the following structure:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>app/\n    app.js\n    data.js\n    lib/\n        jquery.js\n        backbone.js\n        underscore.js\n    modules/\n        api.js\n        auth.js\n</pre></div>\n\n</code></pre>\n<p>The star pattern <code>*</code> is generally used to match all files in the folder:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/*.js&#39;</span>\n<span class=\"c1\">// matches app.js, data.js</span>\n</pre></div>\n\n</code></pre>\n<p>The double star pattern <code>**/*</code> is used to match all files in the folder and its subfolders:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/**/*.js&#39;</span>\n<span class=\"c1\">// matches app.js, data.js, jquery.js, backbone.js, underscore.js, api.js, auth.js</span>\n</pre></div>\n\n</code></pre>\n<p>You don&#39;t need to define complicated, all-encompassing patterns, because you can define the sources as arrays. They will all be processed and will result in <em>a set of files</em> (meaning each file will appear only once even if it&#39;s matched by multiple patterns).</p>\n<p>For example, let&#39;s say you want to select all JavaScript files in the <code>app</code> folder and its subfolders, <em>but not</em> the <code>lib</code> subfolder:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;app/**/*.js&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;!app/lib/*.js&#39;</span><span class=\"p\">]</span>\n<span class=\"c1\">// matches app.js, data.js, api.js, auth.js</span>\n</pre></div>\n\n</code></pre>\n<p>This array of patterns will initially match all JavaScript files in <code>app</code> but then will exclude those from the <code>lib</code> subfolder. Easy! </p>\n<h4><a name=\"practice-your-patterns\" class=\"anchor\" href=\"#practice-your-patterns\"><span class=\"header-link\"></span></a>Practice your patterns</h4><p>Todo.</p>\n<h3><a name=\"defining-the-files-object-dynamically\" class=\"anchor\" href=\"#defining-the-files-object-dynamically\"><span class=\"header-link\"></span></a>Defining the files object dynamically</h3><p>We mentioned earlier that each object in the Files Array format can take additional properties. Some of these properties are useful in defining our file mappings dynamically.\nLet&#39;s take a look:</p>\n<ul>\n<li><code>expand</code> is set to <code>true</code> so that we can use dynamic mappings;</li>\n<li><code>cwd</code> (current working directory) is the common path to all the source files;</li>\n<li><code>src</code> is an array of one or more patterns to match, relative to <code>cwd</code>;</li>\n<li><code>dest</code> is the counterpart to <code>cwd</code> and describes the destination path prefix;</li>\n<li><code>ext</code> is the new extension for the destination files, which replaces the extension of the original file; </li>\n</ul>\n<p>The dynamic mapping is useful for one-to-one mappings: for each source file you will get a destination file.</p>\n<p>A real-world example would be copying an entire folder structure from one place to another.</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>my-project\n    app/\n        js/\n            app.js\n            data.js\n            lib/\n                jquery.js\n                backbone.js\n            modules/\n                api.js\n                auth.js\n    dist/\n    Gruntfile.js\n    package.json\n</pre></div>\n\n</code></pre>\n<p>We will use <code>grunt-contrib-copy</code> to copy the content of the <code>js</code> folder into <code>dist</code>. A first attempt:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">copy</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n            <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/js/**/*.js&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist/&#39;</span>\n        <span class=\"p\">}]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>An honest attempt, but it generates the following structure:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>my-project\n    app/\n        js/\n            app.js\n            data.js\n            lib/\n                jquery.js\n                backbone.js\n            modules/\n                api.js\n                auth.js\n    dist/\n        app/\n            js/\n                app.js\n                data.js\n                lib/\n                    jquery.js\n                    backbone.js\n                modules/\n                    api.js\n                    auth.js\n    Gruntfile.js\n    package.json\n</pre></div>\n\n</code></pre>\n<p>Close, but no cigar. We wanted the <code>js</code> folder included directly under <code>dist</code>.</p>\n<p>What we need to do is take the <code>app</code> part out of the <code>src</code> property and put it in the <code>cwd</code> property:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">copy</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">all</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n            <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;app/&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;js/**/*.js&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist/&#39;</span>\n        <span class=\"p\">}]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<p>Which gives us the expected result:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>my-project\n    app/\n        js/\n            app.js\n            data.js\n            lib/\n                jquery.js\n                backbone.js\n            modules/\n                api.js\n                auth.js\n    dist/\n        js/\n            app.js\n            data.js\n            lib/\n                jquery.js\n                backbone.js\n            modules/\n                api.js\n                auth.js\n    Gruntfile.js\n    package.json\n</pre></div>\n\n</code></pre>\n<p>Freeze Frame High-Five!&trade;</p>\n<p>So where&#39;s the difference? Well, the <code>cwd</code> parameter &mdash; standing for the Common Working Directory, if you remember &mdash; dictates where the root of the whole structure we want to match is located, and the rest of the folder structure (from the <code>src</code> parameter) is mapped one-to-one in the path defined by <code>dest</code>.</p>\n<h3><a name=\"take-five\" class=\"anchor\" href=\"#take-five\"><span class=\"header-link\"></span></a>Take five</h3>","url":"files/","dest":"book/chapters/files/index.html"},{"title":"Write your own Grunt tasks","slug":"custom-tasks","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/09 - Write your own Grunt tasks.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<h3><a name=\"a-primer-on-custom-tasks\" class=\"anchor\" href=\"#a-primer-on-custom-tasks\"><span class=\"header-link\"></span></a>A primer on custom tasks</h3><h4><a name=\"aliasing-existing-tasks\" class=\"anchor\" href=\"#aliasing-existing-tasks\"><span class=\"header-link\"></span></a>Aliasing existing tasks</h4><p>Task aliasing is useful for when you want to run multiple tasks in sequence without having to invoke Grunt specifically for each one. The way to do this is:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span><span class=\"s1\">&#39;mytask&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Optional task description&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;jshint&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;qunit&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;concat&#39;</span><span class=\"p\">]);</span>\n</pre></div>\n\n</code></pre><p>This way you can simply run</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">grunt</span> <span class=\"nx\">mytask</span>\n</pre></div>\n\n</code></pre><p>...and it will trigger the succession of <code>jshint</code>, <code>qunit</code> and <code>concat</code>.</p>\n<p>We usually want to define a <code>default</code> task that will run when we simply type <code>grunt</code> in the command line:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;watch&#39;</span><span class=\"p\">]);</span>\n</pre></div>\n\n</code></pre><p>In addition, the list of tasks can come with specific targets:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;watch:stylesheets&#39;</span><span class=\"p\">]);</span>\n</pre></div>\n\n</code></pre><h3><a name=\"working-with-files\" class=\"anchor\" href=\"#working-with-files\"><span class=\"header-link\"></span></a>Working with files</h3><p>Chances are your app will want to operate on files. You can learn about the different ways users can define files in the <em>Files In-Depth</em> chapter, and there certainly are a bunch of them! Fortunately, Grunt does the heavy-lifting for us and normalizes all formats into the <em>Files Array</em> format, expanding all the patterns it finds along the way. </p>\n<p>So really all we have to do is grab the array from <code>this.files</code> containing objects which have two main properties:</p>\n<ul>\n<li>the <code>dest</code> property holds the path to the destination;</li>\n<li>the <code>src</code> property is an array of one or more source files for the destination.</li>\n</ul>\n<p>Let&#39;s try this out!</p>\n<p>Assume we have a project structure like this one:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>app/\n    src1.js\n    src2.js\nGruntfile.js\npackage.json\n</pre></div>\n\n</code></pre>\n<p>We write the following Grunt code:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n    <span class=\"nx\">logfiles</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">filesObject</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;dist/file1.js&#39;</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;app/src*.js&#39;</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">filesArray</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n                <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;app/src*.js&#39;</span><span class=\"p\">],</span>\n                <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist/file1.js&#39;</span>\n            <span class=\"p\">}]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerMultiTask</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;logfiles&#39;</span><span class=\"p\">,</span> \n    <span class=\"s1\">&#39;Log the source-destination mappings in a Grunt multitask&#39;</span><span class=\"p\">,</span> \n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">writeln</span><span class=\"p\">(</span><span class=\"s1\">&#39;File &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">dest</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; has the sources &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">src</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>    \n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</pre></div>\n\n</code></pre>\n<p>Firstly, we created two targets corresponding to two different ways of defining files for our tasks. Secondly, we defined our multitask as a simple loop through the <code>this.files</code> array.</p>\n<p>Now let&#39;s check what each of them outputs:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt logfiles:filesObject\n&gt; Running <span class=\"s2\">&quot;logfiles:filesObject&quot;</span> <span class=\"o\">(</span>logfiles<span class=\"o\">)</span> task\n&gt; File dist/file1.js has the sources app/src1.js, app/src2.js\n\ngrunt logfiles:filesArray\n&gt; Running <span class=\"s2\">&quot;logfiles:filesArray&quot;</span> <span class=\"o\">(</span>logfiles<span class=\"o\">)</span> task\n&gt; File dist/file1.js has the sources app/src1.js, app/src2.js\n</pre></div>\n\n</code></pre>\n<p>Identical &mdash; one less thing for us to worry about!</p>\n<h4><a name=\"excluding-sources-that-don39t-exist\" class=\"anchor\" href=\"#excluding-sources-that-don39t-exist\"><span class=\"header-link\"></span></a>Excluding sources that don&#39;t exist</h4><p>A good practice in all tasks is to filter out the source files that don&#39;t actually exist in the project:</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">sources</span> <span class=\"o\">=</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">src</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">exists</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">warn</span><span class=\"p\">(</span><span class=\"s1\">&#39;Source file &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">path</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; not found.&#39;</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre>\n<p>Now the <code>sources</code> variable contains only the subset of files that are valid.</p>\n","url":"custom-tasks/","dest":"book/chapters/custom-tasks/index.html"},{"title":"Loading external data in our tasks","slug":"external-data","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/10 - Loading external data.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p>Grunt provides two methods for loading external data into the Gruntfile:</p>\n<ul>\n<li><code>grunt.file.readJSON()</code> to load an external JSON file;</li>\n<li><code>grunt.file.readYAML()</code> to load an external YAML file;</li>\n</ul>\n<p>JSON and YAML are both languages to describe data structures, so you can choose whichever you feel more comfortable with.</p>\n<p>A common use for reading external data is to pull out task options into separate files, for easier maintenace.</p>\n<h3><a name=\"load-grunt-tasks-dynamically\" class=\"anchor\" href=\"#load-grunt-tasks-dynamically\"><span class=\"header-link\"></span></a>Load Grunt tasks dynamically</h3><p>Let&#39;s use <code>readJSON()</code> for something fun like automatically loading all the tasks defined in <code>package.json</code>, instead of writing <code>grunt.loadNpmTasks()</code> for each one.</p>\n<pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// load `package.json`</span>\n    <span class=\"kd\">var</span> <span class=\"kr\">package</span> <span class=\"o\">=</span> <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">readJSON</span><span class=\"p\">(</span><span class=\"s1\">&#39;package.json&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// check if we have any dependencies</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kr\">package</span><span class=\"p\">.</span><span class=\"nx\">devDependencies</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// filter out the ones that don&#39;t start with `grunt-`</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">gruntTasks</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"kr\">package</span><span class=\"p\">.</span><span class=\"nx\">devDependencies</span><span class=\"p\">).</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">task</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">task</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"s1\">&#39;grunt-&#39;</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    \n        <span class=\"p\">});</span>\n\n        <span class=\"c1\">// load each task</span>\n        <span class=\"nx\">gruntTasks</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</pre></div>\n\n</code></pre>\n<p><strong>Note:</strong> A small caveat &mdash; <code>readJSON()</code> only accepts <em>valid</em> JSON-files, while <code>package.json</code> can be merely JSON-like and still work with <code>npm install</code>. The most common JSON-like-but-not-quite-JSON thing it might contain are comments, which work perfectly fine with the NPM installer but will break the above script.</p>\n","url":"external-data/","dest":"book/chapters/external-data/index.html"},{"title":"Our Big Project &mdash; creating a static website plugin","slug":"our-big-project","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/11 - Our big project.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p>Let&#39;s put everything we know together to create a static website generator that takes pages in markdown format and assembles them into a fully-functional blog.</p>\n<h3><a name=\"what-we39re-trying-to-do\" class=\"anchor\" href=\"#what-we39re-trying-to-do\"><span class=\"header-link\"></span></a>What we&#39;re trying to do</h3><p>Let&#39;s look at the structure we want for the project:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>my-blog\n    init/\n        sample.post\n    content/\n        hello_world.post\n        second_post.post\n    templates/\n        partials/\n            header.tmpl\n            footer.tmpl\n        archive.tmpl\n        category.tmpl\n        index.tmpl\n        post.tmpl\n    styles/\n        blog.css\n    scripts/\n        blog.js\n    blog/\n        &lt;our blog gets generated here&gt;\n    Gruntfile.js\n    package.json\n</pre></div>\n\n</code></pre>\n<p>We will need to take the information for each post from the <code>.post</code> file and build a corresponding <code>.html</code> file by assembling it from templates:</p>\n<ul>\n<li>templates that correspond to the different types of pages we will have: a home page, a list of all the posts, a list of posts in a specific category and pages for the individual posts;</li>\n<li><code>partials</code> which are the parts common to all page types, such as the header and the footer.</li>\n</ul>\n<h4><a name=\"the-structure-of-posts\" class=\"anchor\" href=\"#the-structure-of-posts\"><span class=\"header-link\"></span></a>The structure of posts</h4><p>We want to be able to include some meta-data along with the content of our posts, so a post should look like:</p>\n<pre><code class=\"lang-yaml\"><div class=\"highlight\"><pre><span class=\"p-Indicator\">[</span><span class=\"nv\">METADATA</span><span class=\"p-Indicator\">]</span>\n\n<span class=\"l-Scalar-Plain\">title</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">My Post</span>\n<span class=\"l-Scalar-Plain\">slug</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">my-post</span>\n<span class=\"l-Scalar-Plain\">date</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">September 13, 2013</span>\n<span class=\"l-Scalar-Plain\">category</span><span class=\"p-Indicator\">:</span> <span class=\"l-Scalar-Plain\">General</span>\n\n<span class=\"p-Indicator\">[</span><span class=\"nv\">CONTENT</span><span class=\"p-Indicator\">]</span>\n\n<span class=\"l-Scalar-Plain\">&lt;markdown content goes here&gt;</span>\n</pre></div>\n\n</code></pre>\n<p>Let&#39;s think about the kind of metadata is useful:</p>\n<ul>\n<li><code>title</code> for the title of the post;</li>\n<li><code>slug</code> for the URL part leading to the post; in the example above, it would be <code>http://myawesomeblog.com/my-post</code>; in the absence of an explicit slug, we should generate it based on the post title based on some rules;</li>\n<li><code>date</code> when the post was written; if ommited, we can look at the timestamp on the file itself.</li>\n<li><code>category</code> of the post.</li>\n</ul>\n<p>We&#39;ve also created a <code>init</code> folder containing <code>sample.post</code> so we don&#39;t have to start each page from scratch. We&#39;ll create a separate Grunt task that creates new posts for us:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>grunt new <span class=\"s2\">&quot;Post title&quot;</span>\n</pre></div>\n\n</code></pre>\n<h3><a name=\"let39s-gather-our-tools\" class=\"anchor\" href=\"#let39s-gather-our-tools\"><span class=\"header-link\"></span></a>Let&#39;s gather our tools</h3><p>Off the top of our heads, we will most definitely need:</p>\n<ul>\n<li><code>grunt-contrib-copy</code> to copy everything to the <code>blog</code> folder;</li>\n<li><code>grunt-contrib-clean</code> to clean up after generating temporary files;</li>\n<li><code>grunt-markdown</code> to convert the Markdown content of our posts to HTML.</li>\n</ul>\n<h3><a name=\"building-the-gruntfile\" class=\"anchor\" href=\"#building-the-gruntfile\"><span class=\"header-link\"></span></a>Building the Gruntfile</h3><pre><code class=\"lang-javascript\"><div class=\"highlight\"><pre><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">initConfig</span><span class=\"p\">({</span>\n    <span class=\"nx\">copy</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">sample</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n                <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;init/sample.post&#39;</span><span class=\"p\">,</span>\n                <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;posts/new_post.post&#39;</span>\n            <span class=\"p\">}]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Build the blog&#39;</span><span class=\"p\">,</span> <span class=\"p\">[]);</span>\n<span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span><span class=\"s1\">&#39;new&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Create a new post&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;copy:sample&#39;</span><span class=\"p\">])</span>\n</pre></div>\n\n</code></pre>\n","url":"our-big-project/","dest":"book/chapters/our-big-project/index.html"},{"title":"Conclusion","slug":"conclusion","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/12 - Conclusion.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p>Here you are, you&#39;ve made it to the end of the book. I hope it was a worthwhile read. Armed with this knowledge, you should be able to use any Grunt plugin you come accross and even write your own.</p>\n<h3><a name=\"what-now\" class=\"anchor\" href=\"#what-now\"><span class=\"header-link\"></span></a>What now</h3><p>If you&#39;re still looking for a challenge, here are a few suggestions:</p>\n<ul>\n<li>Look into <a href=\"http://yeoman.io/\">Yeoman</a>, which builds upon Grunt to help you scaffold new applications by generating the necessary project structure, fetching third-party libraries and adding all the Grunt tasks you need to get started;</li>\n<li>Fix a bug in your favorite Grunt plugin;</li>\n<li>Help make this book better! You can <a href=\"http://github.com/danburzo/grunt-recipes\">contribute on GitHub</a>.</li>\n</ul>\n","url":"conclusion/","dest":"book/chapters/conclusion/index.html"},{"title":"Appendix A: Some useful Grunt plugins","slug":"appendix-plugins","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/Appendix A - List of plugins.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p>Here are some hand-picked plugins for your enjoyment. Most of the &#39;official&#39; plugins (starting with <code>grunt-contrib</code>) are included. I&#39;ve also included a few non-Grunt plugins (marked with <code>*</code>) because they play nice with the others.</p>\n<h3><a name=\"general-purpose\" class=\"anchor\" href=\"#general-purpose\"><span class=\"header-link\"></span></a>General purpose</h3><p>These general purpose plugins operate on any text-based files.</p>\n<table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>grunt-contrib-copy</td>\n<td>Copy files and folders from one location to another.</td>\n</tr>\n<tr>\n<td>grunt-contrib-concat</td>\n<td>Concatenate files.</td>\n</tr>\n<tr>\n<td>grunt-contrib-clean</td>\n<td>Delete files and folders from your project. You can use this to clean up if other tasks create temporary files.</td>\n</tr>\n<tr>\n<td>grunt-contrib-watch</td>\n<td>Watch for changes on files in your project and trigger other tasks. We discussed about this in <em>Chapter 6</em>.</td>\n</tr>\n<tr>\n<td>grunt-contrib-compress</td>\n<td>Create archives from your files.</td>\n</tr>\n<tr>\n<td>grunt-contrib-symlink</td>\n<td>Create symbolic links, for when you don&#39;t need to physically copy files.</td>\n</tr>\n<tr>\n<td>grunt-rev</td>\n<td>Prefix your files with a number representing their content, so each time you change the file, the output will have a different file name to bust the browser cache when you deploy it in production.</td>\n</tr>\n</tbody>\n</table>\n<h3><a name=\"server-oriented\" class=\"anchor\" href=\"#server-oriented\"><span class=\"header-link\"></span></a>Server-oriented</h3><p>These plugins are geared towards running a web server locally.</p>\n<table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>grunt-contrib-connect</td>\n<td>Start a server to preview your changes or to facilitate other tasks, such as automated testing.</td>\n</tr>\n<tr>\n<td>grunt-contrib-livereload</td>\n<td>Reload your pages after each change you make. Works in conjunction with <code>grunt-contrib-connect</code> and <code>grunt-contrib-watch</code>.</td>\n</tr>\n<tr>\n<td>*connect-modrewrite</td>\n<td>When used in conjunction with <code>grunt-contrib-connect</code>, allows you to add mod-rewrite rules.</td>\n</tr>\n</tbody>\n</table>\n<h3><a name=\"css-specific\" class=\"anchor\" href=\"#css-specific\"><span class=\"header-link\"></span></a>CSS-specific</h3><p>Plugins to work with various languages and frameworks that compile to CSS or to lint &amp; minify your stylesheets.</p>\n<table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>grunt-contrib-less</td>\n<td>Convert <a href=\"http://lesscss.org/\">LESS</a> to CSS.</td>\n</tr>\n<tr>\n<td>grunt-contrib-sass</td>\n<td>Convert <a href=\"http://sass-lang.com/\">Sass</a> to CSS.</td>\n</tr>\n<tr>\n<td>grunt-contrib-stylus</td>\n<td>Convert <a href=\"http://learnboost.github.io/stylus/\">Stylus</a> to CSS.</td>\n</tr>\n<tr>\n<td>grunt-contrib-compass</td>\n<td>Allows you to use the <a href=\"http://compass-style.org/\">Compass</a> framework for Sass.</td>\n</tr>\n<tr>\n<td>grunt-recess</td>\n<td>Use Twitter&#39;s RECESS module on top of LESS.</td>\n</tr>\n<tr>\n<td>grunt-contrib-csslint</td>\n<td>Lint tool for CSS.</td>\n</tr>\n<tr>\n<td>grunt-contrib-cssmin</td>\n<td>Minify your CSS files.</td>\n</tr>\n<tr>\n<td>grunt-contrib-mincss</td>\n<td>Another plugin for CSS minification.</td>\n</tr>\n</tbody>\n</table>\n<h3><a name=\"javascript-specific\" class=\"anchor\" href=\"#javascript-specific\"><span class=\"header-link\"></span></a>JavaScript-specific</h3><p>These are plugins that work primarily on JavaScript and other languages that compile to JavaScript.</p>\n<table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>grunt-contrib-coffee</td>\n<td>CoffeeScript to JavaScript.</td>\n</tr>\n<tr>\n<td>grunt-contrib-jshint</td>\n<td>Lint tool for JavaScript. We talked about it in <em>Chapter 3</em>.</td>\n</tr>\n<tr>\n<td>grunt-complexity</td>\n<td>Analyze the complexity of your code.</td>\n</tr>\n<tr>\n<td>grunt-plato</td>\n<td>Analyze your code with Plato.</td>\n</tr>\n</tbody>\n</table>\n<h3><a name=\"html-specific\" class=\"anchor\" href=\"#html-specific\"><span class=\"header-link\"></span></a>HTML-specific</h3><table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>grunt-contrib-handlebars</td>\n<td>Handlebars templates &rarr; JST.</td>\n</tr>\n<tr>\n<td>grunt-contrib-jst</td>\n<td>Underscore templates &rarr; JST.</td>\n</tr>\n<tr>\n<td>grunt-contrib-jade</td>\n<td>Jade templates &rarr; JST.</td>\n</tr>\n<tr>\n<td>grunt-contrib-htmlmin</td>\n<td>Minify your HTML files by removing comments and irrelevant white space.</td>\n</tr>\n<tr>\n<td>grunt-manifest</td>\n<td>Generate HTML5 cache manifest files for web sites that can run even when the device is not connected to the Internet.</td>\n</tr>\n<tr>\n<td>grunt-usemin</td>\n<td>This plugin is composed of two tasks <code>useminPrepare</code> and <code>usemin</code>.</td>\n</tr>\n</tbody>\n</table>\n<h3><a name=\"image-specific\" class=\"anchor\" href=\"#image-specific\"><span class=\"header-link\"></span></a>Image-specific</h3><table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>grunt-contrib-imagemin</td>\n<td>Minify images.</td>\n</tr>\n<tr>\n<td>grunt-grunticon</td>\n<td>GruntIcon was created by Filament Group.</td>\n</tr>\n<tr>\n<td>grunt-spritesmith</td>\n<td>Generate sprites from your image files.</td>\n</tr>\n</tbody>\n</table>\n<h3><a name=\"automated-testing\" class=\"anchor\" href=\"#automated-testing\"><span class=\"header-link\"></span></a>Automated testing</h3><table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>grunt-contrib-jasmine</td>\n<td>Automatically builds and maintains your spec runner and runs your tests headlessly through phantomjs.</td>\n</tr>\n<tr>\n<td>grunt-contrib-nodeunit</td>\n<td>Unit testing for Node.</td>\n</tr>\n<tr>\n<td>grunt-contrib-qunit</td>\n<td>Run QUnit tests.</td>\n</tr>\n<tr>\n<td>grunt-karma</td>\n<td>A Grunt plugin for the Karma test runner.</td>\n</tr>\n</tbody>\n</table>\n<h3><a name=\"miscellaneous\" class=\"anchor\" href=\"#miscellaneous\"><span class=\"header-link\"></span></a>Miscellaneous</h3><table>\n<thead>\n<tr>\n<th>Plugin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>grunt-contrib-requirejs</td>\n<td>Build your RequireJS-powered app.</td>\n</tr>\n<tr>\n<td>grunt-contrib-yuidoc</td>\n<td>Generate documentation from YUIDoc.</td>\n</tr>\n</tbody>\n</table>\n","url":"appendix-plugins/","dest":"book/chapters/appendix-plugins/index.html"},{"title":"Appendix B: Using Grunt with other tools","slug":"tools","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/Appendix B - Grunt and other tools.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<h3><a name=\"grunt-in-sublime-text\" class=\"anchor\" href=\"#grunt-in-sublime-text\"><span class=\"header-link\"></span></a>Grunt in Sublime Text</h3><p>The Sublime Text plugin <a href=\"https://github.com/tvooo/sublime-grunt\"><code>sublime-grunt</code></a> allows you to run Grunt directly inside the editor, so you don&#39;t have to toggle between the IDE and the command line when developing.</p>\n","url":"tools/","dest":"book/chapters/tools/index.html"},{"title":"Appendix C: Using the code that comes with this book","slug":"code","date":"2014-01-20T14:09:18.000Z","sourcePath":"chapters/Appendix C - Using the code in the book.md","lastModified":"2014-01-20T14:09:18.000Z","content":"<p>Each chapter in this book comes with code samples that you can run to get a better idea of how the concepts apply in real life. You can download the code here: [[LINK]]</p>\n<p>To install the necessary dependencies for each project, open up a console and navigate to the project folder. Then simply run:</p>\n<pre><code class=\"lang-bash\"><div class=\"highlight\"><pre>npm install\n</pre></div>\n\n</code></pre>\n<p>NPM (Node Package Manager) will install Grunt and the other plugins needed to run the Gruntfile.</p>\n<p>You can also check out the <code>README.md</code> file that comes with each project for more details.</p>\n","url":"code/","dest":"book/chapters/code/index.html"},{"title":"Appendix D: Troubleshooting Common Problems","slug":"troubleshooting","date":"2014-01-22T09:07:10.000Z","sourcePath":"chapters/Appendix D - Troubleshooting.md","lastModified":"2014-01-22T09:07:10.000Z","content":"<p>No problems yet!</p>\n","url":"troubleshooting/","dest":"book/chapters/troubleshooting/index.html"}]}